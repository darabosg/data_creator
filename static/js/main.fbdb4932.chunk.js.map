{"version":3,"sources":["helpers/replaceAt.js","componenets/Schema/TypeSelect.jsx","componenets/Schema/ShemaInput.jsx","componenets/Schema/Schema.jsx","helpers/getType.js","helpers/clearData.js","componenets/Inputs/ArrayInputs.jsx","componenets/Inputs/InputLabel.jsx","componenets/Inputs/ObjectInputs.jsx","componenets/Inputs/SingleInput.jsx","componenets/Inputs/DataHub.jsx","helpers/initData.js","componenets/Inputs/Inputs.jsx","componenets/Output/Output.jsx","draftdata.js","componenets/WholeData/WholeData.jsx","App.js","index.js"],"names":["replaceAt","array","index","value","copy","slice","TypeSelect","field","label","aboveSchema","setAboveSchema","objectDepth","arrayDepth","childrenSetter","state","children","htmlFor","type","id","name","onChange","e","target","key","schema","setSchema","SchemaInput","className","map","i","onClick","console","log","filter","_","newField","changeKey","length","Schema","ShemaInput","getType","Array","isArray","match","clearData","data","emptyData","getValue","item","uuidv4","makeEmpty","empty","Object","keys","forEach","ArrayInputs","setData","clear","InputLabel","labelKey","of","ObjectInputs","dataKey","SingleInput","change","Number","readOnly","checked","DataHub","initData","newData","initialData","getEmptyValue","isThereData","Boolean","schemaType","isTypeChanged","makeInitialData","Inputs","setNewData","preventDefault","prev","Output","useState","lineLength","setLineLength","max","min","navigator","clipboard","writeText","beautify","cols","rows","a","WholeData","App","displayInputs","setDisplayInputs","displayOutput","setDisplayOutput","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbdb4932.chunk.js","sourcesContent":["const replaceAt = (array, index, value) => {\n    const copy = array.slice(0)\n    copy[index] = value\n    return copy\n}\n\nexport default replaceAt\n","import replaceAt from '../../helpers/replaceAt'\nimport React from 'react'\nimport SchemaInput from './ShemaInput'\n\nconst TypeSelect = ({\n    field,\n    label,\n    aboveSchema,\n    setAboveSchema,\n    index,\n    objectDepth,\n    arrayDepth,\n}) => {\n    const childrenSetter = state =>\n        setAboveSchema(\n            replaceAt(aboveSchema, index, { ...field, children: state })\n        )\n\n    const changeType = e => {\n        if (e.target.value === 'array') {\n            setAboveSchema(\n                replaceAt(aboveSchema, index, {\n                    ...field,\n                    type: e.target.value,\n                    children: [{ key: 0, type: 'string' }],\n                })\n            )\n        } else if (e.target.value === 'object') {\n            setAboveSchema(\n                replaceAt(aboveSchema, index, {\n                    ...field,\n                    type: e.target.value,\n                    children: [{ key: 'YOUR_KEY', type: 'string' }],\n                })\n            )\n        } else {\n            setAboveSchema(\n                replaceAt(aboveSchema, index, {\n                    ...field,\n                    type: e.target.value,\n                })\n            )\n        }\n    }\n\n    return (\n        <>\n            <label htmlFor='type'>{label}</label>\n            <select\n                type='text'\n                id='type'\n                name='type'\n                value={field.type}\n                onChange={changeType}\n            >\n                <option value='string'>String</option>\n                <option value='number'>Number</option>\n                <option value='boolean'>Boolean</option>\n                {arrayDepth > 0 && <option value='array'>Array</option>}\n                {objectDepth > 0 && <option value='object'>Object</option>}\n\n                <option value='uuid'>Uuid</option>\n            </select>\n            {field.type === 'array' && (\n                <TypeSelect\n                    arrayDepth={arrayDepth - 1}\n                    objectDepth={objectDepth}\n                    index={0}\n                    setAboveSchema={childrenSetter}\n                    aboveSchema={field.children}\n                    field={field.children[0]}\n                    label='Of: '\n                />\n            )}\n            {field.type === 'object' && (\n                <SchemaInput\n                    arrayDepth={arrayDepth}\n                    objectDepth={objectDepth - 1}\n                    schema={field.children}\n                    setSchema={childrenSetter}\n                />\n            )}\n        </>\n    )\n}\n\nexport default TypeSelect\n","import './SchemaInput.css'\nimport TypeSelect from './TypeSelect'\nimport replaceAt from '../../helpers/replaceAt'\nimport React from 'react'\n\nconst SchemaInput = ({ schema, setSchema, objectDepth,arrayDepth }) => {\n    const changeKey = e => (index, field) => {\n        const newField = { ...field, key: e.target.value }\n        setSchema(replaceAt(schema, index, newField))\n    }\n\n    const addField = () => {\n        setSchema([...schema, { key: 'YOUR_KEY_'+(schema.length+1), type: 'string', value: '' }])\n    }\n\n    const deleteField = index => {\n        console.log(index)\n        setSchema(schema.filter((_, i) => i !== index))\n    }\n\n    return (\n        <div className='schema-object'>\n            {schema.map((field, i) => (\n                <div className='schema-input-container' key={field + i}>\n                    <button onClick={() => deleteField(i)}>---</button>\n                    <label htmlFor='key'>Key: </label>\n                    <input\n                        className='schema-input'\n                        type='text'\n                        id='key'\n                        name='key'\n                        value={field.key}\n                        onChange={e => changeKey(e)(i, field)}\n                    />\n                    <TypeSelect\n                        objectDepth={objectDepth}\n                        arrayDepth={arrayDepth}\n                        index={i}\n                        setAboveSchema={setSchema}\n                        aboveSchema={schema}\n                        field={field}\n                        label='Type: '\n                    />\n                </div>\n            ))}\n            <button onClick={addField}>Add</button>\n        </div>\n    )\n}\n\nexport default SchemaInput\n","import React from 'react'\nimport ShemaInput from './ShemaInput'\n\nconst Schema = ({schema, setSchema}) => {\n\n\n\n\n    return (\n        <div>\n            <h1>Create your schema</h1>\n            <ShemaInput\n                schema={schema}\n                setSchema={setSchema}\n                objectDepth={4}\n                arrayDepth={4}\n            />\n        </div>\n    )\n}\n\nexport default Schema\n","\nconst getType = value => {\n    if (Array.isArray(value)) {\n        return 'array'\n    } else if (typeof value === 'string') {\n        if (\n            value.match(\n                /\\b[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}\\b/\n            )\n        ) {\n            return 'uuid'\n        } else {\n            return 'string'\n        }\n    } else {\n        return typeof value\n    }\n}\n\nexport default getType","import getType from './getType'\nimport { v4 as uuidv4 } from 'uuid'\n\nconst clearData = data => {\n    let emptyData\n\n    const getValue = item => {\n        switch (getType(item)) {\n            case 'array':\n                return []\n            case 'object':\n                return {}\n            case 'string':\n                return ''\n            case 'number':\n                return 0\n            case 'boolean':\n                return false\n            case 'uuid':\n                return uuidv4()\n            default:\n                break\n        }\n    }\n\n    if (getType(data) === 'array') {\n        emptyData = [...data]\n    } else if (getType(data) === 'object') {\n        emptyData = { ...data }\n    } else {\n        return getValue(data)\n    }\n\n    const makeEmpty = (data, empty) => {\n        switch (getType(data)) {\n            case 'object':\n                Object.keys(data).forEach(key => {\n                    empty[key] = getValue(data[key])\n                    makeEmpty(data[key], empty[key])\n                })\n                break\n            case 'array':\n                data.forEach((item, i) => {\n                    empty[i] = getValue(data[i])\n                    makeEmpty(item, empty[i])\n                })\n                break\n            default:empty = getValue(data)\n                break\n        }\n    }\n\n    makeEmpty(data, emptyData)\n\n    return emptyData\n}\n\nexport default clearData\n","import React from 'react'\nimport replaceAt from '../../helpers/replaceAt'\nimport DataHub from './DataHub'\nimport clearData from '../../helpers/clearData'\nimport './ArrayInputs.css'\n\nconst ArrayInputs = ({ data, setData }) => {\n    const childrenSetter = index => state =>\n        setData(replaceAt(data, index, state))\n\n    const addToArray = () => {\n        let clear = clearData(data[0])\n        setData([...data, clear])\n    }\n\n    return (\n        <div className='rel'>\n            <div className='input-array'>\n                {/* <InputLabel  of={getType(data[0])}/> */}\n                {data.map((item, i) => (\n                    <DataHub key={i} data={item} setData={childrenSetter(i)} />\n                ))}\n                <button className='add-to-array' onClick={addToArray}>+</button>\n            </div>\n        </div>\n    )\n}\n\nexport default ArrayInputs\n","import React from 'react'\n\nconst InputLabel = ({type, labelKey, of}) => {\n    return (\n        <div>\n            <label>{labelKey}:&nbsp;</label>\n        </div>\n    )\n}\n\nexport default InputLabel\n","import getType from '../../helpers/getType'\nimport React from 'react'\nimport DataHub from './DataHub'\nimport InputLabel from './InputLabel'\nimport './ObjectInputs.css'\n\nconst ObjectInputs = ({ data, setData }) => {\n    const childrenSetter = dataKey => state =>\n        setData({ ...data, [dataKey]: state })\n\n    return (\n        <>\n            {data && (\n                <div className='rel'>\n                    <div className='input-object'>\n                        {Object.keys(data).map((dataKey, i) => {\n                            return (\n                                <div key={i} className='object-label'>\n                                    <div className='label'>\n                                        <InputLabel\n                                            type={getType(data[dataKey])}\n                                            labelKey={dataKey}\n                                        />\n                                    </div>\n\n                                    <DataHub\n                                        data={data[dataKey]}\n                                        setData={childrenSetter(dataKey)}\n                                    />\n                                </div>\n                            )\n                        })}\n                    </div>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default ObjectInputs\n","import React from 'react'\nimport './SingleInput.css'\nimport getType from '../../helpers/getType'\n\nconst SingleInput = ({ value, setData }) => {\n    const change = e => {\n        switch (getType(value)) {\n            case 'number':\n                setData(Number(e.target.value))\n                break\n            case 'boolean':\n                setData(e.target.value === 'true' ? true : false)\n                break\n            default:\n                setData(e.target.value)\n                break\n        }\n    }\n\n    return (\n        <div>\n            {getType(value) === 'string' && (\n                <input\n                    className='single-input'\n                    value={value}\n                    type='text'\n                    onChange={change}\n                />\n            )}\n            {getType(value) === 'number' && (\n                <input\n                    className='single-input'\n                    value={value}\n                    type='number'\n                    onChange={change}\n                />\n            )}\n            {getType(value) === 'uuid' && (\n                <input\n                    className='single-input'\n                    type='text'\n                    readOnly\n                    value={value}\n                />\n            )}\n\n            {getType(value) === 'boolean' && (\n                <>\n                    <label htmlFor='false'>False</label>\n                    <input\n                        type='radio'\n                        id='false'\n                        value='false'\n                        checked={!value}\n                        onChange={change}\n                    />\n                    <label htmlFor='true'>True</label>\n                    <input\n                        type='radio'\n                        id='true'\n                        value='true'\n                        checked={value}\n                        onChange={change}\n                    />\n                </>\n            )}\n        </div>\n    )\n}\n\nexport default SingleInput\n","import React from 'react'\nimport getType from '../../helpers/getType'\nimport ArrayInputs from './ArrayInputs'\nimport ObjectInputs from './ObjectInputs'\nimport SingleInput from './SingleInput'\n\nconst DataHub = ({ data, setData }) => {\n    return (\n        <div>\n            {getType(data) === 'object' && (\n                <ObjectInputs data={data} setData={setData} />\n            )}\n            {getType(data) === 'array' && (\n                <ArrayInputs data={data} setData={setData} />\n            )}\n            {getType(data) !== 'object' && getType(data) !== 'array' && (\n                <SingleInput value={data} setData={setData} />\n            )}\n        </div>\n    )\n}\n\nexport default DataHub\n","import { v4 as uuidv4 } from 'uuid'\nimport getType from './getType'\n\nconst initData = (schema, newData) => {\n    const initialData = {}\n\n    const getEmptyValue = item => {\n        switch (item.type) {\n            case 'string':\n                return ''\n            case 'number':\n                return 0\n            case 'boolean':\n                return false\n            case 'uuid':\n                return uuidv4()\n            case 'array':\n                return []\n            case 'object':\n                return {}\n            default:\n                break\n        }\n    }\n\n    const isTypeChanged = (schemaType, data) => schemaType !== getType(data)\n\n    const isThereData = Boolean(newData)\n\n    // console.log(isThereData)\n\n    const getValue = (item, data) => {\n        if (isTypeChanged(item.type, data)) {\n            return getEmptyValue(item)\n        } else {\n            return data[item.key]\n        }\n    }\n\n\n\n    const makeInitialData = (schema, data) => {\n        schema.forEach(item => {\n            if (item.type === 'array' || item.type === 'object') {\n                data[item.key] = isThereData\n                    ? getValue(item, data[item.key])\n                    : getEmptyValue(item)\n                makeInitialData(item.children, data[item.key])\n            } else {\n                data[item.key] = getValue(item, data[item.key])\n            }\n        })\n    }\n\n    makeInitialData(schema, initialData)\n\n    return initialData\n}\n\nexport default initData\n","import React from 'react'\nimport DataHub from './DataHub'\nimport initData from '../../helpers/initData'\n\nconst Inputs = ({ schema, setData, newData, setNewData }) => {\n    const addToData = e => {\n        console.log('add to data');\n        e.preventDefault()\n        setData(prev => [...prev, newData])\n        setNewData(initData(schema, newData))\n    }\n\n    return (\n        <div>\n            <h1>Your inputs</h1>\n            <button onClick={() => setNewData(initData(schema, newData))}>\n                Clear All\n            </button>\n            {/* <form id='input-form' onSubmit={addToData}> */}\n                <DataHub data={newData} setData={setNewData} />\n            {/* </form> */}\n                <button onClick={addToData}>Add to data array</button>\n        </div>\n    )\n}\n\nexport default Inputs\n","import './Output.css'\nimport beautify from 'json-beautify'\nimport React, { useState } from 'react'\n\nconst Output = ({ newData }) => {\n    const [lineLength, setLineLength] = useState(50)\n\n    const copyData = () => {\n        navigator.clipboard.writeText(beautify(newData, null, 2, lineLength))\n    }\n\n    return (\n        <div className='output-container'>\n            <h1>Output</h1>\n            <label htmlFor='line-length'>Line length</label>\n            <input\n                type='range'\n                id='line-length'\n                max={50}\n                min={0}\n                value={lineLength}\n                onChange={e => setLineLength(Number(e.target.value))}\n            />\n            <button onClick={copyData}>Copy</button>\n            <textarea\n                className='output-area'\n                readOnly\n                cols='30'\n                value={beautify(newData, null, 2, lineLength)}\n                rows='30'\n            ></textarea>\n        </div>\n    )\n}\n\nexport default Output\n","const a = [\n    {\n        key: 'id',\n        type: 'uuid',\n    },\n    {\n        key: 'title',\n        type: 'string',\n    },\n    {\n        key: 'room',\n        type: 'number',\n    },\n    {\n        key: 'igen-e?',\n        type: 'boolean',\n    },\n    {\n        key: 'time',\n        type: 'object',\n        children: [\n            { key: 'hour', type: 'number' },\n            { key: 'min', type: 'number' },\n        ],\n    },\n    {\n        key: 'pics',\n        type: 'array',\n        children: [\n            {\n                key: 0,\n                type: 'string',\n            },\n        ],\n    },\n    {\n        key: 'arrayInArray',\n        type: 'array',\n        children: [\n            {\n                key: 0,\n                type: 'array',\n                children: [\n                    {\n                        key: 0,\n                        type: 'number',\n                    },\n                ],\n            },\n        ],\n    },\n    {\n        key: 'objInArray',\n        type: 'array',\n        children: [\n            {\n                key: 0,\n                type: 'object',\n                children: [\n                    { key: 'qwe', type: 'number' },\n                    { key: 'asd', type: 'string' },\n                ],\n            },\n        ],\n    },\n]\n\nexport default a\n","import React, { useState } from 'react'\nimport beautify from 'json-beautify'\n\nconst WholeData = ({data,setData}) => {\n  const [lineLength, setLineLength] = useState(50)\n\nconst copyData = () => {\n    navigator.clipboard.writeText(beautify(data, null, 2, lineLength))\n}\n\nconst clearData = () => {\nsetData([])\n}\n\n    return (\n        <div className='output-container'>\n            <h1>Output</h1>\n            <label htmlFor='line-length'>Line length</label>\n            <input\n                type='range'\n                id='line-length'\n                max={50}\n                min={0}\n                value={lineLength}\n                onChange={e => setLineLength(Number(e.target.value))}\n            />\n            <button onClick={copyData}>Copy</button>\n            <button onClick={clearData}>Clear</button>\n            <textarea\n                className='output-area'\n                readOnly\n                cols='30'\n                value={beautify(data, null, 2, lineLength)}\n                rows='30'\n            ></textarea>\n        </div>\n    )\n}\n\n\nexport default WholeData\n","import './App.css'\nimport React, { useState, useEffect } from 'react'\nimport Schema from './componenets/Schema/Schema'\nimport Inputs from './componenets/Inputs/Inputs'\nimport Output from './componenets/Output/Output'\nimport a from './draftdata'\nimport WholeData from './componenets/WholeData/WholeData'\nimport initData from './helpers/initData'\n\nfunction App() {\n    const [displayInputs, setDisplayInputs] = useState(false)\n    const [displayOutput, setDisplayOutput] = useState(false)\n    const [schema, setSchema] = useState(a)\n    const [newData, setNewData] = useState(null)\n    const [data, setData] = useState([])\n\n    useEffect(() => {\n        setNewData(prev=>initData(schema, prev))\n    }, [schema])\n\n\n    const switchInputs = () => {\n        setDisplayInputs(!displayInputs)\n    }\n    const switchOutput = () => {\n        setDisplayOutput(!displayOutput)\n    }\n\n    return (\n        <div className='App'>\n            <div className='flex'>\n                <div className='flex-container'>\n                    {displayInputs ? (\n                        <Inputs\n                            schema={schema}\n                            setData={setData}\n                            newData={newData}\n                            setNewData={setNewData}\n                        />\n                    ) : (\n                        <Schema schema={schema} setSchema={setSchema} />\n                    )}<button onClick={switchInputs}>\n                        {displayInputs\n                            ? '<-- Back to the schema'\n                            : 'Show me my inputs -->'}\n                    </button>\n                    \n                </div>\n\n                <div className='flex-container'>\n                    {displayOutput ? (\n                        <WholeData setData={setData} data={data} />\n                    ) : (\n                        <Output newData={newData} />\n                    )}\n                    <button onClick={switchOutput}>\n                        {displayOutput\n                            ? '<-- Show current data'\n                            : 'Show the data array -->'}\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}